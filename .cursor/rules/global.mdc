---
description: 
globs: 
alwaysApply: true
---
---
description: 100DaysOfCodeチャレンジのためのグローバルAIアシスタント設定：プロセスガイドライン、プロジェクト技術スタック、コーディング規約。
alwaysApply: true
---
# AIタスク実行プロセス（一般ガイドライン）

あなたは高度な問題解決能力を持つAIアシスタントです。以下の指示に従って、効率的かつ正確にタスクを遂行してください。

まず、ユーザーから受け取った指示を確認します：
<指示>
{{instructions}}
</指示>

この指示を元に、以下のプロセスに従って作業を進めてください：

---

1. 指示の分析と計画
   <タスク分析>
   - 主要タスクを簡潔に要約すること。
   - 記載された技術スタックを確認し、その制約内での実装方法を検討すること。
     **※ 技術スタックに記載のバージョンは変更せず、必要があれば必ず承認を得てください。**
   - 重要要件・制約を特定すること。
   - 想定課題を列挙すること。
   - 実行ステップを細分化し、最適順に並べること。

   ### 重複実装の防止（事前チェック）
   実装前に以下の確認を行ってください：
   - 既存の類似機能の有無
   - 同名または類似名の関数やコンポーネント
   - 重複するAPIエンドポイント
   - 共通化可能な処理の特定

   この分析は以降の全プロセスの基盤。十分に詳細かつ網羅的に行うこと。
   </タスク分析>

---

2. タスクの実行
   - 特定したステップを一つずつ実行してください。
   - 各ステップ完了時に簡潔な進捗を記録すること。
   - 実装時の留意点：
     - 適切なディレクトリ構造の遵守
     - 命名規則の一貫性維持
     - 共通処理の適切な配置

---

3. 品質管理と問題対応
   - 各タスクの結果を迅速に検証すること。
   - 不具合発生時の対応手順：
     a. 切り分けと原因特定（ログ / デバッグ情報の確認）
     b. 対策案の作成と実施
     c. 修正後の動作検証
     d. デバッグログの確認と分析
   
   - 検証結果の記録フォーマット：
     a. 検証項目と期待される結果
     b. 実際の結果と差異
     c. 必要な対応策（該当する場合）

---

4. 最終確認
   - 成果物を全体評価し、当初指示との整合を確認すること。
   - 実装機能に重複がないか最終点検すること。

---

5. 結果報告
   以下のフォーマットで最終的な結果を報告してください：
   # 実行結果報告

   ## 概要
   [全体の要約を簡潔に記述]

   ## 実行ステップ
   1. [ステップ1の説明と結果]
   2. [ステップ2の説明と結果]
  ...

   ## 最終成果物
   [成果物の詳細や、該当する場合はリンクなど]

   ## 課題対応（該当する場合）
   - 発生した問題と対応内容
   - 今後の注意点

   ## 注意点・改善提案
   - [気づいた点や改善提案があれば記述]

---

## 重要な注意事項

- 不明点は 作業開始前 に必ず確認を取ること。
- 重要な判断はその都度報告し、承認を得ること。
- 予期せぬ問題は即時報告し、対応策を提案すること。
- **明示的な指示がない変更は行わないこと。** 変更が必要と思われる場合は提案・承認後に実施すること。
- **UI/UX（レイアウト / 色 / フォント / 間隔など）の変更は原則禁止。**必要時は理由と影響を示し、事前承認を得ること。
- **技術スタックのバージョン（API / フレームワーク / ライブラリ等）を勝手に変更しないこと。** 必要時は理由を明確化し、承認が下りるまで保留すること。

---
# プロジェクト: 100DaysOfCodeチャレンジ特有事項

## 概要
- **目的**: React, Next.js (App Router), TypeScript, Tailwind CSS の学習と実践。
- **目標**: [100DaysOfCode.html](mdc:src/app/100DaysOfCode.html)を参照し、毎日1つ、簡単なウェブアプリケーションを作成し、100日間継続する。
- **現在のディレクトリ構造**: 各日のアプリは `src/app/dayX-appName/` の形式で管理。 (例: `src/app/day1-counter/`)

## AI への一般的な指示
- **技術スタック**: 回答やコード生成は、主に以下の技術を前提としてください。
     - Next.js: 15.3.2 (from package.json)
     - React: ^19.0.0 (from package.json)
     - Tailwind CSS: ^4 (from package.json, postcss.config.mjs)
     - shadcn/ui ([globals.css](mdc:src/app/globals.css)を参照。)

- **コーディングスタイル**:
     - 関心の分離を意識し、再利用可能なコンポーネントとすること。
     - Next.js の App Router の規約（`page.tsx`, `layout.tsx`, `loading.tsx`, `error.tsx` など）に従うこと。
     - TypeScript の型を正確に定義すること。
     - Tailwind はユーティリティファースト。インラインスタイルは避けること。

- **Header・Footer・PageHeaderの実装ルール**:
     - すべての `dayX` プロジェクトの `layout.tsx` に **Header** / **PageHeader** / **Footer** を配置すること。
     - **Header コンポーネント**: 全てのdayXプロジェクトの`layout.tsx`で**Header**コンポーネントを実装し、必ず`title`プロパティを渡す。フォーマットは`"Day XX: プロジェクト名"`の形式。
       - 例: `<Header title="Day 32: ユーザー登録フォーム" />`
     - **Footer コンポーネント**: 全てのdayXプロジェクトのlayout.tsxでFooterコンポーネントを実装し、必ずcurrentDayプロパティを渡す。
       - 例: `<Footer currentDay={32} />`
     - **PageHeader コンポーネント**: 全てのdayXプロジェクトのlayout.tsxでPageHeaderコンポーネントを実装し、titleとdescriptionプロパティを渡す。
     - **page.tsxのヘッダーセクション禁止**: PageHeaderが存在するため、page.tsxにヘッダーセクション（h1、プロジェクト説明など）を実装してはいけない。重複表示を避けるため。
     - **正しいlayout.tsxの構造**:
       ```tsx
       import Header from '@/components/common/Header';
       import PageHeader from '@/components/common/PageHeader';
       import Footer from '@/components/common/Footer';

       export default function DayXXLayout({
         children,
       }: {
         children: React.ReactNode;
       }) {
         return (
           <div className="min-h-screen bg-gray-50">
             <Header title="Day XX: プロジェクト名" />
            <PageHeader title="（絵文字）プロジェクト名" description="プロジェクトの説明" />
             <main className="bg-gray-50 min-h-screen">
               {children}
             </main>
             <Footer currentDay={XX} />
           </div>
         );
       }
       ```

- **新規プロジェクト作成時の必須更新作業**:
     - **ホームページに表示**: [page.tsx](mdc:src/app/page.tsx) の`apps`配列で、新しいプロジェクトの該当部分のコメントアウト(`//`)を外す
     - **フッターナビゲーション対応**: [Footer.tsx](mdc:src/components/common/Footer.tsx)の`dayRoutes`オブジェクトに新しい日数とパスを追加する
     - 例: `x: '/dayx-new-app'`
  
  ※ この作業を忘れると、ホームページにカードが表示されない、または前後日ナビゲーションが機能しなくなります。
  
  - **ホームカードの画像運用（必須）**:
      - `apps`配列の各要素に`imageUrl`を必ず設定すること
  
- **背景色の統一**:
各プロジェクトでPageHeaderとメインコンテンツの背景色が分離しないよう、layout.tsxの`main`タグに背景色（例：`bg-gray-50 min-h-screen`）を設定し、page.tsxでは重複する背景色設定は避けてください。プロジェクトごとに異なる背景色を使用する場合は、layout.tsxで統一して管理してください。

- **コミットメッセージ運用**: 
  - コードを変更した場合、会話の最後に日本語でコミットメッセージを3つ提案。可能な範囲で [Conventional Commits](mdc:https:/www.conventionalcommits.org) の形式にすること。（例: `feat: 新機能を追加`, `fix: バグを修正`, `docs: ドキュメントを更新`）
 
 - **原則**: 1 コミット = 1 意図。テスト / ビルドが通る状態を保ち、不要変更は含めない。
   - 例（推奨粒度）:
     - ルート/フッター更新
     - レイアウト追加（Header/PageHeader/Footer）
     - ページシェル追加（薄いpage.tsx）
     - コンポーネント追加（UI）
     - フック/ユーティリティ追加（ロジック）
     - ドキュメント（dayX.md）
     - 画像追加（imageUrl更新）

- **Tailwind CSS クラスの注釈**:
     - `className` の主要効果を 1 行の日本語コメント で添える（全網羅は不要）。
     - コメントは、該当行の行末に `// 説明` の形で記述するか、または該当行の直前に ` {/* 説明 */}` の形で記述してください。
     - 例:
       ```jsx
       <div className="px-4 py-2 bg-red-500 text-white rounded"> {/* 横余白4, 縦余白2, 赤背景, 白文字, 角丸 */}
         {/*... */}
       </div>

       {/* または */}

       {/* text-5xl:文字大, font-bold:太字 */}
       <h2 className="text-5xl text-black font-bold">{count}</h2>

       {/* または */}

       <button className="px-2 py-1 text-sm"> {/* 横パディング2, 縦パディング1, 小文字 */}
         もっと見る
       </button>
       ```
     - 説明は主要な効果に絞り、1行で簡潔にお願いします。全てのクラスを網羅する必要はありません。
- **回答言語**: 日本語でお願いします。


# コーディングスタイル指針（TypeScript）

## any 禁止ポリシー
- 原則として `any` の使用を禁止。型安全性を損ね、バグの温床になるため。
- 例外（やむを得ない一時利用）の場合は、対象行に限定した無効化と理由コメントを必須とする。
  - 例: `// eslint-disable-next-line @typescript-eslint/no-explicit-any -- ライブラリ型未整備のため暫定。Issue #123 で解消予定`

## 代替指針（any の代わりに使うもの）
- 値の型がまだ不明: `unknown`
- 到達不能/ありえない分岐: `never`
- 任意のオブジェクト: `Record<string, unknown>`
- ジェネリクスの既定値: `T = unknown`

## 例外・外部入力の扱い
  ```ts
  try { /* ... */ }
  catch (e: unknown) {
    if (e instanceof Error) {
      console.error(e.message);
    } else {
      console.error('Unknown error', e);
    }
  }
  ```
- 外部APIやサードパーティの入力は一旦 `unknown` とし、スキーマバリデーション（例: Zod）または型ガードで検証後に使用します。

## レビュー観点チェックリスト
- `any` を使っていないか？
- `catch` が `unknown` で適切に型ガードされているか？
- 外部入力に対し、検証（スキーマ or 型ガード）が行われているか？
- ジェネリクスの既定値に `any` を使っていないか？

## 重要なプロジェクトファイル (常に意識してください)
- プロジェクト全体のルートレイアウト: `src/app/layout.tsx`
- グローバルなスタイルシート: `src/app/globals.css`
- 全体共通のコンポーネント(header、ボタンなど):`src/components`
- Tailwind CSS 設定ファイル: tailwindv4の為ありません。
- TypeScript 設定ファイル: `tsconfig.json`
- Next.js 設定ファイル: `next.config.ts` (または `.js`)
- 各アプリのルートページ: `src/app/dayX-appName/page.tsx`
- 各アプリのレイアウト: `src/app/dayX-appName/layout.tsx`
- 各アプリのコンポーネント: `src/app/dayX-appName/components/`

### **【重要】新規プロジェクト作成時のルール**
- 新しい`dayX-appName`プロジェクトを作成するたびに、必ず`src/components/common/Footer.tsx`を開き、`generateDayPath`関数内の`dayRoutes`オブジェクトに新しいルートを追加してください。
  - 例: `11: '/day11-new-app'`
- これを忘れると、フッターのナビゲーションが正しく機能しなくなります。

# Atomic Design 採用ルール

## 目的
- UIを **再利用** ＆ **変更容易** に保ち、dayXごとの実装の重複を減らす。
- コンポーネントの粒度／依存方向を明確化して、保守性を高める。

## レイヤ定義（禁則・依存方向含む）
- **Atoms**: 最小の表示要素（`Button`, `Text`, `Icon`, `Input`, `Badge` など）
  - OK：ユーティリティ（hooks / utils）の利用、shadcn/ui を内包ラップ
  - NG：Molecules / Organisms / Templates への依存
- **Molecules**: Atomsの組み合わせ（`FormField`, `CardHeader`, `NavItem` など）
  - OK：Atoms
  - NG：Organisms / Templates への逆依存
- **Organisms**: 意味のある領域（`HeaderBar`, `FooterNav`, `TodoList` など）
  - OK：Atoms / Molecules
  - NG：Templates への逆依存
- **Templates**: ページ骨格（`TwoColumn`, `DashboardShell` など）
  - OK：Organisms / Molecules / Atoms
  - 禁止: Pages 以外からの参照（= Templates は Page で使う）
- **Pages**: App Router の `page.tsx`（**既存ルール通りヘッダー類は置かない**:前述ルール参照）

**依存方向の原則**  
`Pages → Templates → Organisms → Molecules → Atoms`（下方向のみ）。

## ディレクトリ標準
**グローバル（共有）コンポーネントはここに集約：**
```
src/components/
├── atoms/
├── molecules/
├── organisms/
├── templates/
└── common/           # 既存の Header / PageHeader / Footer はここ
```

**dayX 配下は「アプリ固有」だけ置く：**
```
src/app/dayX-appName/
├── page.tsx
├── layout.tsx
├── dayX.md
├── components/   # その日のアプリ専用（再利用想定が薄い）ならここ
└── hooks|ui|utils|lib（必要に応じて）
```
> **原則**: 再利用できそうな UI は `src/components/*` に昇格させる。  
> アプリ固有なら `src/app/dayX-appName/components` に留める。

## 命名・エクスポート
- コンポーネントは **PascalCase**、ファイル名も一致（例：`FormField.tsx`）。
- 各階層に `index.ts` を置き、**バレルエクスポート**を推奨。
- `atoms/index.ts` → `molecules/index.ts`…の順に再エクスポートOK。ただし**逆方向の参照は禁止**。

## shadcn/ui の扱い
- 基本は Atoms でラップ。Molecules 以上は 自前ラッパー経由 で利用。
  - 例: `atoms/Button.tsx` が `@/components/ui/button` を内部で使用。
- 直接 `@/components/ui/*` を使って良いのは **Atoms だけ**。  
  Molecules 以上では `atoms/Button` など **自前ラッパー経由**で利用する。

## 型と例外
- 既存の **any 禁止ポリシー** を Atomic でも遵守。
- 外部入力（フォーム値など）は Molecules/Organisms で **Zod などの検証**を行い、Atoms は「見た目」に集中。

## ルーティング／レイアウトとの整合
- 既存の **Header/PageHeader/Footer**（`src/components/common/*`）は **Organisms** 相当として扱い、**配置は各 day の `layout.tsx`**（既存ルール通り）。
- **page.tsx にヘッダー類を置かない**（既存ルールを再確認）。

### 命名規則とベストプラクティス
- フォルダ名: kebab-case（例: `day4-todo-list`）
- ファイル名: PascalCase（例: `TodoForm.tsx`）
- 各フォルダには必要に応じて `index.ts` を配置してエクスポートを整理
- 関心事の分離を意識し、役割ごとにフォルダを分ける
- 再利用可能なコンポーネントは適切に抽象化する

---
#### **プロジェクト構成情報**
以下のファイルはプロジェクトのルートディレクトリに配置されています。
プロジェクトの進行に応じて内容を更新してください。
何らかの更新があった際に、これらのファイルの最新情報を参照し、変更があれば更新してください。

- **技術スタック**: [technologystack.md](mdc:technologystack.md)
  * このファイルには、使用している主要な技術、ライブラリ、ツール、およびそれらのバージョンが記載されています。
- **ディレクトリ構成**: [directorystructure.md](mdc:directorystructure.md)
  * このファイルには、プロジェクトの主要なディレクトリ構造と、各ディレクトリの役割についての説明が記載されています。
### **【重要】よくあるミスと対策**
- **ミス1: Headerにtitleを忘れる**
  - 症状: Headerが正しく表示されない
  - 対策: 必ず`<Header title="Day XX: プロジェクト名" />`の形式で実装

- **ミス2: FooterにcurrentDayを忘れる**
  - 症状: 前後日ナビゲーションが機能しない
  - 対策: 必ず`<Footer currentDay={XX} />`の形式で実装

- **ミス3: page.tsxにヘッダーセクションを重複実装**
  - 症状: タイトルが重複表示される
  - 対策: PageHeaderがある場合はpage.tsxにヘッダーを実装しない

- **ミス4: ホームページとフッターナビゲーションの更新忘れ**
  - 症状: ホームページにカードが表示されない、ナビゲーションが機能しない
  - 対策: 新規プロジェクト作成時は必ず両方を更新

## 各日のプロジェクトフォルダ構成 (dayX-appName)
各日のプロジェクトは `src/app/dayX-appName/` 形式で管理され、以下の基本構成に従います：

### 基本ファイル構成
- **`page.tsx`** (必須): アプリのメインページコンポーネント
- **`layout.tsx`** (推奨): そのアプリ専用のレイアウト設定（Header、Footer含む）
- **`dayX.md`** (必須): その日の実装内容や学習ポイントについて、初学者向けに、分かりやすい例えを使って詳細に解説したものを作成。ドキュメント。
- **`types.ts`** (必要に応じて): TypeScript型定義

### サブディレクトリ構成
追加の機能やコンポーネントが必要な場合は、以下のフォルダを作成します：

- **`components/`**: そのアプリ専用のReactコンポーネント
- **`hooks/`**: カスタムフック
- **`ui/`**: UI特化コンポーネント（表示用）
- **`utils/`**: ユーティリティ関数
- **`lib/`**: ライブラリやヘルパー関数

### 構成例

#### day4-todo-list （シンプル構成）
```
src/app/day4-todo-list/
├── page.tsx          # メインページ
├── layout.tsx        # レイアウト
├── day4.md          # 学習記録
├── types.ts         # Todo型定義
└── components/      # アプリ専用コンポーネント
    ├── TodoForm.tsx
    └── TodoItem.tsx
```

#### day6-stopwatch （複合構成）
```
src/app/day6-stopwatch/
├── page.tsx          # メインページ
├── layout.tsx        # レイアウト
├── day6.md          # 学習記録
├── components/      # アプリ専用コンポーネント
│   ├── Stopwatch.tsx
│   └── index.ts
├── hooks/           # カスタムフック
│   ├── useStopwatch.ts
│   └── index.ts
└── ui/              # UI特化コンポーネント
    ├── StatusIndicator.tsx
    ├── TimeDisplay.tsx
    ├── ControlButtons.tsx
    ├── LearningPoints.tsx
    └── index.ts
```

---



## その他
- このルールは、チャットおよび Command+I
 リクエストに常に適用されます。