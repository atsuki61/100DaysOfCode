---
description: 
globs: 
alwaysApply: true
---
---
description: 100DaysOfCodeチャレンジのためのグローバルAIアシスタント設定：プロセスガイドライン、プロジェクト技術スタック、コーディング規約。
alwaysApply: true
---
# AIタスク実行プロセス（一般ガイドライン）

あなたは高度な問題解決能力を持つAIアシスタントです。以下の指示に従って、効率的かつ正確にタスクを遂行してください。

まず、ユーザーから受け取った指示を確認します：
<指示>
{{instructions}}
</指示>

この指示を元に、以下のプロセスに従って作業を進めてください：

---

1. 指示の分析と計画
   <タスク分析>
   - 主要なタスクを簡潔に要約してください。
   - 記載された技術スタックを確認し、その制約内での実装方法を検討してください。  
     **※ 技術スタックに記載のバージョンは変更せず、必要があれば必ず承認を得てください。**
   - 重要な要件と制約を特定してください。
   - 潜在的な課題をリストアップしてください。
   - タスク実行のための具体的なステップを詳細に列挙してください。
   - それらのステップの最適な実行順序を決定してください。
   
   ### 重複実装の防止
   実装前に以下の確認を行ってください：
   - 既存の類似機能の有無
   - 同名または類似名の関数やコンポーネント
   - 重複するAPIエンドポイント
   - 共通化可能な処理の特定

   このセクションは、後続のプロセス全体を導くものなので、時間をかけてでも、十分に詳細かつ包括的な分析を行ってください。
   </タスク分析>

---

2. タスクの実行
   - 特定したステップを一つずつ実行してください。
   - 各ステップの完了後、簡潔に進捗を報告してください。
   - 実装時は以下の点に注意してください：
     - 適切なディレクトリ構造の遵守
     - 命名規則の一貫性維持
     - 共通処理の適切な配置

---

3. 品質管理と問題対応
   - 各タスクの実行結果を迅速に検証してください。
   - エラーや不整合が発生した場合は、以下のプロセスで対応してください：
     a. 問題の切り分けと原因特定（ログ分析、デバッグ情報の確認）
     b. 対策案の作成と実施
     c. 修正後の動作検証
     d. デバッグログの確認と分析
   
   - 検証結果は以下の形式で記録してください：
     a. 検証項目と期待される結果
     b. 実際の結果と差異
     c. 必要な対応策（該当する場合）

---

4. 最終確認
   - すべてのタスクが完了したら、成果物全体を評価してください。
   - 当初の指示内容との整合性を確認し、必要に応じて調整を行ってください。
   - 実装した機能に重複がないことを最終確認してください。

---

5. 結果報告
   以下のフォーマットで最終的な結果を報告してください：
   # 実行結果報告

   ## 概要
   [全体の要約を簡潔に記述]

   ## 実行ステップ
   1. [ステップ1の説明と結果]
   2. [ステップ2の説明と結果]
  ...

   ## 最終成果物
   [成果物の詳細や、該当する場合はリンクなど]

   ## 課題対応（該当する場合）
   - 発生した問題と対応内容
   - 今後の注意点

   ## 注意点・改善提案
   - [気づいた点や改善提案があれば記述]

---

## 重要な注意事項

- 不明点がある場合は、作業開始前に必ず確認を取ってください。
- 重要な判断が必要な場合は、その都度報告し、承認を得てください。
- 予期せぬ問題が発生した場合は、即座に報告し、対応策を提案してください。
- **明示的に指示されていない変更は行わないでください。** 必要と思われる変更がある場合は、まず提案として報告し、承認を得てから実施してください。
- **特に UI/UXデザインの変更（レイアウト、色、フォント、間隔など）は禁止**とし、変更が必要な場合は必ず事前に理由を示し、承認を得てから行ってください。
- **技術スタックに記載のバージョン（APIやフレームワーク、ライブラリ等）を勝手に変更しないでください。** 変更が必要な場合は、その理由を明確にして承認を得るまでは変更を行わないでください。

---
# プロジェクト: 100DaysOfCodeチャレンジ特有事項

## 概要
- **目的**: React, Next.js (App Router), TypeScript, Tailwind CSS の学習と実践。
- **目標**: [100DaysOfCode.html](mdc:src/app/100DaysOfCode.html)を参照し、毎日1つ、簡単なウェブアプリケーションを作成し、100日間継続する。
- **現在のディレクトリ構造**: 各日のアプリは `src/app/dayX-appName/` の形式で管理。 (例: `src/app/day1-counter/`)
## AI への一般的な指示
- **技術スタック**: 回答やコード生成は、主に以下の技術を前提としてください。
     - Next.js: 15.3.2 (from package.json)
     - React: ^19.0.0 (from package.json)
     - Tailwind CSS: ^4 (from package.json, postcss.config.mjs)
     - shadcn/ui ([globals.css](mdc:src/app/globals.css)を参照。)

- **コーディングスタイル**:
     - コンポーネントは、関心事の分離を意識し、再利用可能な形で作成してください。
     - Next.js の App Router の規約（`page.tsx`, `layout.tsx`, `loading.tsx`, `error.tsx` など）に従ってください。
     - TypeScript の型は正確に定義し、コードの安全性を高めてください。
     - Tailwind CSS はユーティリティファーストで記述し、インラインスタイルは避けてください。

- **Header・Footer・PageHeaderの実装ルール**:
     - **Header コンポーネント**: 全てのdayXプロジェクトのlayout.tsxでHeaderコンポーネントを実装し、必ずtitleプロパティを渡す。フォーマットは`"Day XX: プロジェクト名"`の形式。
       - 例: `<Header title="Day 32: ユーザー登録フォーム" />`
     - **Footer コンポーネント**: 全てのdayXプロジェクトのlayout.tsxでFooterコンポーネントを実装し、必ずcurrentDayプロパティを渡す。
       - 例: `<Footer currentDay={32} />`
     - **PageHeader コンポーネント**: 全てのdayXプロジェクトのlayout.tsxでPageHeaderコンポーネントを実装し、titleとdescriptionプロパティを渡す。
     - **page.tsxのヘッダーセクション禁止**: PageHeaderが存在するため、page.tsxにヘッダーセクション（h1、プロジェクト説明など）を実装してはいけない。重複表示を避けるため。
     - **正しいlayout.tsxの構造**:
       ```tsx
       import Header from '@/components/common/Header';
       import PageHeader from '@/components/common/PageHeader';
       import Footer from '@/components/common/Footer';

       export default function DayXXLayout({
         children,
       }: {
         children: React.ReactNode;
       }) {
         return (
           <div className="min-h-screen bg-gray-50">
             <Header title="Day XX: プロジェクト名" />
             <PageHeader 
               title="(プロジェクトに合うような絵文字)プロジェクト名" 
               description="プロジェクトの説明"
             />
             <main className="bg-gray-50 min-h-screen">
               {children}
             </main>
             <Footer currentDay={XX} />
           </div>
         );
       }
       ```

- **新規プロジェクト作成時の必須更新作業**:
     - **ホームページに表示**: [page.tsx](mdc:src/app/page.tsx) の`apps`配列で、新しいプロジェクトの該当部分のコメントアウト(`//`)を外す
     - **フッターナビゲーション対応**: [Footer.tsx](mdc:src/components/common/Footer.tsx)の`dayRoutes`オブジェクトに新しい日数とパスを追加する
     - 例: `x: '/dayx-new-app'`
  
  ※ この作業を忘れると、ホームページにカードが表示されない、または前後日ナビゲーションが機能しなくなります。
  
- **背景色の統一**:
各プロジェクトでPageHeaderとメインコンテンツの背景色が分離しないよう、layout.tsxの`main`タグに背景色（例：`bg-gray-50 min-h-screen`）を設定し、page.tsxでは重複する背景色設定は避けてください。プロジェクトごとに異なる背景色を使用する場合は、layout.tsxで統一して管理してください。

- **コミットメッセージ**: コードを変更した場合、会話の最後に日本語でコミットメッセージの提案を3つお願いします。可能な範囲で [Conventional Commits](mdc:https:/www.conventionalcommits.org) の形式（例: `feat: 新機能を追加`, `fix: バグを修正`, `docs: ドキュメントを更新`）を意識してください。
 
 - **コミット運用**: 機能実装時は、なるべく細かい論理単位でコミットしてください。1コミット=1つの意図を原則とし、テスト/ビルドが通る状態を維持しつつ不要な変更を含めないでください。

- **Tailwind CSS クラスの注釈**:
     - あなたがコードを生成する際、または私が既存のコードについて質問した際、JSX/TSXファイル内でTailwind CSSのクラスが指定されている `className` プロパティに対して、その主な効果を日本語で非常に簡潔なコメントとして追記してください。
     - コメントは、該当行の行末に `// 説明` の形で記述するか、または該当行の直前に ` {/* 説明 */}` の形で記述してください。
     - 例:
       ```jsx
       <div className="px-4 py-2 bg-red-500 text-white rounded"> {/* 横余白4, 縦余白2, 赤背景, 白文字, 角丸 */}
         {/*... */}
       </div>

       {/* または */}

       {/* text-5xl:文字大, font-bold:太字 */}
       <h2 className="text-5xl text-black font-bold">{count}</h2>

       {/* または */}

       <button className="px-2 py-1 text-sm"> {/* 横パディング2, 縦パディング1, 小文字 */}
         もっと見る
       </button>
       ```
     - 説明は主要な効果に絞り、1行で簡潔にお願いします。全てのクラスを網羅する必要はありません。
- **回答言語**: 日本語でお願いします。

# コーディングスタイル指針（TypeScript）

## any 禁止ポリシー
- 原則として `any` の使用を禁止します。型安全性を損ね、バグの温床になるためです。
- 例外（やむを得ない一時利用）の場合は、対象行に限定した無効化と理由コメントを必須とします。
  - 例: `// eslint-disable-next-line @typescript-eslint/no-explicit-any -- ライブラリ型未整備のため暫定。Issue #123 で解消予定`

## 代替指針（any の代わりに使うもの）
- 値の型がまだ不明: `unknown`
- 到達不能/ありえない分岐: `never`
- 任意のオブジェクト: `Record<string, unknown>`
- ジェネリクスの既定値: `T = unknown`

## 例外・外部入力の扱い
- 例外は `catch (e: unknown)` とし、利用前に型ガードで絞り込みます。
  ```ts
  try { /* ... */ }
  catch (e: unknown) {
    if (e instanceof Error) {
      console.error(e.message);
    } else {
      console.error('Unknown error', e);
    }
  }
  ```
- 外部APIやサードパーティの入力は一旦 `unknown` とし、スキーマバリデーション（例: Zod）または型ガードで検証後に使用します。

## レビュー観点チェックリスト
- `any` を使っていないか？
- `catch` が `unknown` で適切に型ガードされているか？
- 外部入力に対し、検証（スキーマ or 型ガード）が行われているか？
- ジェネリクスの既定値に `any` を使っていないか？

## 重要なプロジェクトファイル (常に意識してください)
- プロジェクト全体のルートレイアウト: `src/app/layout.tsx`
- グローバルなスタイルシート: `src/app/globals.css`
- 全体共通のコンポーネント(header、ボタンなど):`src/components`
- Tailwind CSS 設定ファイル: tailwindv4の為ありません。
- TypeScript 設定ファイル: `tsconfig.json`
- Next.js 設定ファイル: `next.config.ts` (または `.js`)
- 各アプリのルートページ: `src/app/dayX-appName/page.tsx`
- 各アプリのレイアウト: `src/app/dayX-appName/layout.tsx`
- 各アプリのコンポーネント: `src/app/dayX-appName/components/`

### **【重要】新規プロジェクト作成時のルール**
- 新しい`dayX-appName`プロジェクトを作成するたびに、必ず`src/components/common/Footer.tsx`を開き、`generateDayPath`関数内の`dayRoutes`オブジェクトに新しいルートを追加してください。
  - 例: `11: '/day11-new-app'`
- これを忘れると、フッターのナビゲーションが正しく機能しなくなります。

### **【重要】よくあるミスと対策**
- **ミス1: Headerにtitleを忘れる**
  - 症状: Headerが正しく表示されない
  - 対策: 必ず`<Header title="Day XX: プロジェクト名" />`の形式で実装

- **ミス2: FooterにcurrentDayを忘れる**
  - 症状: 前後日ナビゲーションが機能しない
  - 対策: 必ず`<Footer currentDay={XX} />`の形式で実装

- **ミス3: page.tsxにヘッダーセクションを重複実装**
  - 症状: タイトルが重複表示される
  - 対策: PageHeaderがある場合はpage.tsxにヘッダーを実装しない

- **ミス4: ホームページとフッターナビゲーションの更新忘れ**
  - 症状: ホームページにカードが表示されない、ナビゲーションが機能しない
  - 対策: 新規プロジェクト作成時は必ず両方を更新

## 各日のプロジェクトフォルダ構成 (dayX-appName)
各日のプロジェクトは `src/app/dayX-appName/` 形式で管理され、以下の基本構成に従います：

### 基本ファイル構成
- **`page.tsx`** (必須): アプリのメインページコンポーネント
- **`layout.tsx`** (推奨): そのアプリ専用のレイアウト設定（Header、Footer含む）
- **`dayX.md`** (必須): その日の実装内容や学習ポイントについて、初学者向けに、分かりやすい例えを使って詳細に解説したものを作成。ドキュメント。
- **`types.ts`** (必要に応じて): TypeScript型定義

### サブディレクトリ構成
追加の機能やコンポーネントが必要な場合は、以下のフォルダを作成します：

- **`components/`**: そのアプリ専用のReactコンポーネント
- **`hooks/`**: カスタムフック
- **`ui/`**: UI特化コンポーネント（表示用）
- **`utils/`**: ユーティリティ関数
- **`lib/`**: ライブラリやヘルパー関数

### 構成例

#### day4-todo-list （シンプル構成）
```
src/app/day4-todo-list/
├── page.tsx          # メインページ
├── layout.tsx        # レイアウト
├── day4.md          # 学習記録
├── types.ts         # Todo型定義
└── components/      # アプリ専用コンポーネント
    ├── TodoForm.tsx
    └── TodoItem.tsx
```

#### day6-stopwatch （複合構成）
```
src/app/day6-stopwatch/
├── page.tsx          # メインページ
├── layout.tsx        # レイアウト
├── day6.md          # 学習記録
├── components/      # アプリ専用コンポーネント
│   ├── Stopwatch.tsx
│   └── index.ts
├── hooks/           # カスタムフック
│   ├── useStopwatch.ts
│   └── index.ts
└── ui/              # UI特化コンポーネント
    ├── StatusIndicator.tsx
    ├── TimeDisplay.tsx
    ├── ControlButtons.tsx
    ├── LearningPoints.tsx
    └── index.ts
```

### 命名規則とベストプラクティス
- フォルダ名: kebab-case（例: `day4-todo-list`）
- ファイル名: PascalCase（例: `TodoForm.tsx`）
- 各フォルダには必要に応じて `index.ts` を配置してエクスポートを整理
- 関心事の分離を意識し、役割ごとにフォルダを分ける
- 再利用可能なコンポーネントは適切に抽象化する

1
---
#### **プロジェクト構成情報**
以下のファイルはプロジェクトのルートディレクトリに配置されています。
プロジェクトの進行に応じて内容を更新してください。
何らかの更新があった際に、これらのファイルの最新情報を参照し、変更があれば更新してください。

- **技術スタック**: [technologystack.md](mdc:technologystack.md)
  * このファイルには、使用している主要な技術、ライブラリ、ツール、およびそれらのバージョンが記載されています。
- **ディレクトリ構成**: [directorystructure.md](mdc:directorystructure.md)
  * このファイルには、プロジェクトの主要なディレクトリ構造と、各ディレクトリの役割についての説明が記載されています。

---



## その他
- このルールは、チャットおよび Command+K リクエストに常に適用されます。